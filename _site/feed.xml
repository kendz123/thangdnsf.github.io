<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jiaming Shen's Homepage</title>
    <description>So we beat on, boats against the current, borne back ceaselessly into the past.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 28 Nov 2016 13:10:30 -0600</pubDate>
    <lastBuildDate>Mon, 28 Nov 2016 13:10:30 -0600</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Set up Jupyter Notebook and Run IPython on Ubuntu 16.04 server</title>
        <description>&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;h3 id=&quot;install-ipython-and-ipython-notebook-on-server&quot;&gt;Install Ipython and Ipython-notebook on server&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ipython&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ipython[notebook]&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;run-jupyter-notebook-on-server&quot;&gt;Run Jupyter Notebook on server&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;jupyter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notebook&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Ignore the error saying no JavaScript.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;connect-server-using-ssh-tunneling&quot;&gt;Connect Server Using SSH Tunneling&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8888&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your_server_username&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@your_server_ip&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;open-web-browser-on-local-machine&quot;&gt;Open web browser on local machine&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-a-jupyter-notebook-to-run-ipython-on-ubuntu-16-04&quot;&gt;How To Set Up a Jupyter Notebook to Run IPython on Ubuntu 16.04&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cs231n.github.io/ipython-tutorial/&quot;&gt;IPython Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 02 Oct 2016 00:00:00 -0500</pubDate>
        <link>/2016/10/02/IPython-server.html</link>
        <guid isPermaLink="true">/2016/10/02/IPython-server.html</guid>
        
        
      </item>
    
      <item>
        <title>Git Essential</title>
        <description>&lt;p&gt;&lt;strong&gt;Git Essential 系列教程看完后的笔记，非常零乱，Just for Reference &lt;br /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 1: config
+ homebrew &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;进入http://brew.sh/  参考git essential视频1   &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;此时与系统自带的git版本冲突，开始安装vim &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vim &lt;br /&gt;
brew search vim -&amp;gt; brew install macvim&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###Lesson 2: config
git config —global user.name/emai = “XXX”   命令 &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 3: init
git init &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###☆Lesson 4: add
git status &amp;amp; git add &lt;br /&gt;
理解add的含义：一个文件三个不同的状态： &lt;br /&gt;
1. Changes to be committed&lt;br /&gt;
2. Changes not staged for commit &lt;br /&gt;
3. Untracked files (原始创建文件的状态) &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;trick:
git add .  (加一个. 表示当前文件夹下所有文件全部add)&lt;/p&gt;

&lt;p&gt;###☆Lesson 5: commit
git commit &lt;br /&gt;
git commit -a （-a表示追加 add+commit 一同完成）&lt;br /&gt;
git commit -m ‘commit message’&lt;br /&gt;
git commit -am ‘commit message’&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 6: ignore
vim .gitignore (在project的根目录下使用) &lt;br /&gt;
.gitignore文件下文件命名法则：&lt;br /&gt;
.DS_Store&lt;br /&gt;
tmp&lt;br /&gt;
&lt;em&gt;.swp~&lt;br /&gt;
test/&lt;/em&gt;.txt （不追踪test下的txt文件）&lt;br /&gt;
!test/master.txt  （在上一条的规则下，追踪master.txt）&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 7: Theory
1. Working Directory (project文件夹) &lt;br /&gt;
2. Staging Area(index) (一次次的add) (: 每修改一个地方之后是add，而完成一个整个有意义的修改之后再是commit -&amp;gt; commit message 才能有意义) &lt;br /&gt;
3. Git Repository (核心是project下的 .git文件夹) &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###☆Lesson 8: Theory —— Internals
1. Blob : How git stores file contents  &lt;br /&gt;
2. Tree : How git stores Directory list &lt;br /&gt;
              ①Header information&lt;br /&gt;
              ②For each file and directory in the directory:&lt;br /&gt;
                  file permissions &lt;br /&gt;
                  object type(blob or tree)&lt;br /&gt;
                  sha-1&lt;br /&gt;
                  filename&lt;br /&gt;
3. Commit : How git stores “snapshot!”&lt;br /&gt;
               author information&lt;br /&gt;
               committer information&lt;br /&gt;
               commit message&lt;br /&gt;
               sha-1 of any parent commits&lt;br /&gt;
               sha-1 of the tree that the commit points
     两个图片的例子&lt;br /&gt;
4. Git Reference:&lt;br /&gt;
     两个例子： ①branch / head
                        ②merge影响&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 9: diff
git diff  filename     比对文件修改处&lt;br /&gt;
git diff –staged filename   和目前staged状态的文件对比&lt;br /&gt;
git diff HEAD filename   和目前commit状态的文件对比&lt;br /&gt;
不加filename 对比整个project目录下得修改&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 10: log
git log&lt;br /&gt; 
git log –oneline&lt;br /&gt;
git log –graph&lt;br /&gt;
git log –pretty=“%h, %cn, %cr “  修饰符参考： http://git-scm.com/docs/git-log&lt;br /&gt;
gitk 图形化页面&lt;br /&gt;
之后使用:q 退出&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###☆Lesson 11: branch
git branch  : 查看所有branch以及目前所在的branch&lt;br /&gt;
git branch experimental-1  : 创建一个branch叫做branch,但目前不在这个branch&lt;br /&gt;
git checkout experimental-1 : 切换到这个branch&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;注意理解commit与branch的关系&lt;br /&gt;
如果仅仅修改contents而不commit，在所有的branch上都会显示files被modified&lt;br /&gt;
直到在某个branch上修改被commit之后，才会在对应的branch上显示出来。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;git checkout -b bug-fix-1 ： 创建branch: bug-fix-1 与此同时切换到这个branch上&lt;br /&gt;
git log –online –graph –all：显示所有branch上得commit&lt;br /&gt;
git log –online –graph –all –decorate: &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 12:  merge
git alias gl= “git log –oneline –graph –all –decorate”&lt;br /&gt;
git merge branch_name : 把branch_name代表的branch合并到目前所在的branch，这个merge操作相当于一个commit.&lt;br /&gt;
git branch -d branch_name: 删除branch&lt;br /&gt;
git rebase branch_name: 含义见5:30处&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 13: github
配置ssh链接github的教程&lt;/p&gt;

&lt;p&gt;###Lesson 14: github-tour
简介github功能&lt;/p&gt;

&lt;p&gt;###☆Lesson 15: remote-push-pull
// 把本地的repository提交到github &lt;br /&gt;
①git remote add “name of remote” “link”
     &lt;br /&gt;e.g: git remote add origin git@github…&lt;br /&gt;
git remote &lt;br /&gt;
②git push &lt;name of=&quot;&quot; remote=&quot;&quot;&gt; &lt;name of=&quot;&quot; branch=&quot;&quot;&gt;&lt;br /&gt;
     e.g:git push origin master&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;

&lt;p&gt;//把github的内容拉到本地repository &lt;br /&gt;
git pull &lt;br /&gt;
上述做法缺点是会自动完成merge工序，覆盖掉了本地未提交的修改。改进如下：&lt;br /&gt;
①git fetch&lt;br /&gt;
②切换到master分支&lt;br /&gt;
③git merge origin/master&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 16: github-page
两种建立pages的方法——非UI&lt;br /&gt;
建立UI的页面——参考pages.github.com&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 17: interactive-add
git add -i //切出一个页面，控制更详细的add&lt;br /&gt;
     特别注意其中的patch方法，可以把文件中的一处处修改分开来add,而非add一整个文件&lt;br /&gt;
git add -p //上述方法的缩写&lt;br /&gt;
进入git add -p之后，y/n表示是否stage某处修改，s表示split此处修改(使之细分)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 18:git-stash
stash：藏匿&lt;br /&gt;
git stash会把目前没有add的修改存放到一边,&lt;br /&gt;
git stash list: 查看目前stash的内容&lt;br /&gt;
git stash save “stash message” （stash的过程中提交stash message）&lt;br /&gt;
git stash apply 还原最近的一次stash （但不会删掉这个stash）&lt;br /&gt;
git stash apply 后面加一个index，apply指定的一次stash&lt;br /&gt;
git stash pop 还原最近的一次stash （同时删掉这个stash）&lt;br /&gt;
git stash drop 扔掉最近的一次stash&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 19: aliases
① 利用git的bulid-in功能&lt;br /&gt;
git config –global alias.(short command) (original command)&lt;br /&gt;
e.g. git config –global alias.s status&lt;br /&gt;
查看 cat ~/.gitconfig&lt;br /&gt;
② 利用bash的功能&lt;br /&gt;
     命令行里：vim .bash_profile&lt;br /&gt;
     输入：alias ga=“git add”&lt;br /&gt;
               alias gst=“git status”&lt;br /&gt;
               alias gi=“git add -i”&lt;br /&gt;
     命令行里：source ~/.bash_profile&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 20: merge-conflict
conflict的产生：在两个branch上对同一处进行了无法合并的修改并且commit了，当merge时会出现conflict&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;解决方法：根据git的反馈结果去自行修改冲突，选择留下来的版本&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;复习branch:&lt;br /&gt;
git branch：查看branch&lt;br /&gt;
git branch XXX: 创建branch（但停留在当前branch）&lt;br /&gt;
git checkout XXX: 切换到XXX_branch&lt;br /&gt;
git checkout -b XXX: 创建branch_XXX，同时切换到这个branch&lt;br /&gt;
git merge XXX: 把XXX_branch合并到当前所在的branch&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 21: guis
介绍了图形化的git页面，介绍了github:mac&lt;/p&gt;

&lt;p&gt;###Lesson 22:vcprompt
快速查看目前的git状态&lt;br /&gt;
使用第三方插件： https://github.com/djl/vcprompt&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;###Lesson 23: conclusion
提供了一些深度学习git的资源链接&lt;/p&gt;

&lt;p&gt;##总结&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;了解git的底层推荐使用命令行，&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;简单使用git推荐使用UI界面，&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;在项目工作中学习Git,了解Git的重要性.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###Small notes
git reset –hard &lt;commit-id&gt;&lt;/commit-id&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 21 Feb 2014 00:00:00 -0600</pubDate>
        <link>/2014/02/21/Git.html</link>
        <guid isPermaLink="true">/2014/02/21/Git.html</guid>
        
        
      </item>
    
      <item>
        <title>使用Github Pages + Jekyll 搭建个人Blog</title>
        <description>&lt;p&gt;简单介绍了Jekyll配置过程中的关键点和注意事项，包含一些上传github的git操作, 以及一些过程中涉及到的参考资料&lt;/p&gt;

&lt;h2 id=&quot;jekyll-&quot;&gt;Jekyll 配置&lt;/h2&gt;

&lt;p&gt;这里主要介绍 Mac OS 环境的安装，如果是Windows的话需要先安装ruby和ruby gem.&lt;/p&gt;

&lt;p&gt;参考&lt;a href=&quot;http://jekyllrb.com/docs/installation/&quot;&gt;官方教程&lt;/a&gt;
核心其实就是一句&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;问题就是，由于GFW的存在… 所以直接这样会卡死不动，而是需要我们改gem源&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rubygems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;taobao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;修改完源之后在使用gem安装jekyll，如果报错，就改为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果再报错“Failed to build gem native extension”，很可能是没有安装rvm，可以敲入下面的命令：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;到此jekyll就安装完成了,下面安装一个Markdown解释器:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rdiscount&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后在_config.yml里面设定 markdown: rdiscount&lt;/p&gt;

&lt;p&gt;到此jekyll配置完成，cd到根目录下,输入下面命令即可运行。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git&quot;&gt;基本Git操作&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;git status (查看当前状态)&lt;/li&gt;
  &lt;li&gt;git add . (stage全部文件)&lt;/li&gt;
  &lt;li&gt;git commit -m “commit message” (commit)&lt;/li&gt;
  &lt;li&gt;git branch (查看所有branch以及目前所在的branch)&lt;/li&gt;
  &lt;li&gt;git branch master (切换到master branch)&lt;/li&gt;
  &lt;li&gt;git push origin master (提交到服务器)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;pages.github.com&quot;&gt;Github Pages 官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://git-scm.com/about&quot;&gt;Git 官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wowubuntu.com/markdown/basic.html&quot;&gt;Markdown 语法说明&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/docs/installation/&quot;&gt;Jekyll 官方文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://beiyuu.com/github-pages/&quot;&gt;使用Github Pages建立博客&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 19 Feb 2014 00:00:00 -0600</pubDate>
        <link>/2014/02/19/Github-page-config.html</link>
        <guid isPermaLink="true">/2014/02/19/Github-page-config.html</guid>
        
        
      </item>
    
  </channel>
</rss>
